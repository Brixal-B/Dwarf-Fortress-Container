[1mdiff --git a/Dockerfile b/Dockerfile[m
[1mindex b1ac057..9507fde 100644[m
[1m--- a/Dockerfile[m
[1m+++ b/Dockerfile[m
[36m@@ -21,19 +21,36 @@[m [mRUN apt-get update && apt-get install -y \[m
     fluxbox \[m
     && rm -rf /var/lib/apt/lists/*[m
 [m
[32m+[m[32m# Install Python packages for API server[m
[32m+[m[32mRUN pip3 install flask flask-cors[m
[32m+[m
 # Create working directory[m
 WORKDIR /opt/dwarf-fortress[m
 [m
[31m-# Copy download script[m
[32m+[m[32m# Copy download script, API server, and scripts[m
 COPY download_df.sh /opt/dwarf-fortress/[m
[32m+[m[32mCOPY df_api_server.py /opt/dwarf-fortress/[m
[32m+[m[32mCOPY scripts/ /opt/dwarf-fortress/scripts/[m
 RUN chmod +x /opt/dwarf-fortress/download_df.sh[m
[32m+[m[32mRUN chmod +x /opt/dwarf-fortress/df_api_server.py[m
 [m
 # Download Dwarf Fortress and DFHack[m
 RUN ./download_df.sh[m
 [m
 # Create a user for running the application[m
 RUN useradd -m -s /bin/bash dfuser[m
[31m-RUN chown -R dfuser:dfuser /opt/dwarf-fortress[m
[32m+[m
[32m+[m[32m# Copy startup script before changing ownership[m
[32m+[m[32mCOPY start.sh /opt/dwarf-fortress/[m
[32m+[m[32mRUN chmod +x /opt/dwarf-fortress/start.sh[m
[32m+[m
[32m+[m[32m# Create output directory with proper permissions[m
[32m+[m[32mRUN mkdir -p /opt/dwarf-fortress/output && chown -R dfuser:dfuser /opt/dwarf-fortress/output[m
[32m+[m
[32m+[m[32m# Change ownership of only essential files - avoid the huge DF installation[m
[32m+[m[32mRUN chown dfuser:dfuser /opt/dwarf-fortress/df_api_server.py \[m
[32m+[m[32m    && chown -R dfuser:dfuser /opt/dwarf-fortress/scripts \[m
[32m+[m[32m    && chown dfuser:dfuser /opt/dwarf-fortress/start.sh[m
 [m
 # Switch to non-root user[m
 USER dfuser[m
[36m@@ -41,12 +58,9 @@[m [mUSER dfuser[m
 # Set up display for headless operation[m
 ENV DISPLAY=:99[m
 [m
[31m-# Create startup script[m
[31m-COPY --chown=dfuser:dfuser start.sh /opt/dwarf-fortress/[m
[31m-RUN chmod +x /opt/dwarf-fortress/start.sh[m
[31m-[m
[31m-# Expose VNC port for remote access (optional)[m
[32m+[m[32m# Expose VNC port for remote access and API server port[m
 EXPOSE 5900[m
[32m+[m[32mEXPOSE 8080[m
 [m
 # Default command[m
 CMD ["/opt/dwarf-fortress/start.sh"][m
[1mdiff --git a/docker-compose.yml b/docker-compose.yml[m
[1mindex bc61ed9..dfd35c0 100644[m
[1m--- a/docker-compose.yml[m
[1m+++ b/docker-compose.yml[m
[36m@@ -6,16 +6,48 @@[m [mservices:[m
     container_name: dwarf-fortress-ai[m
     ports:[m
       - "5900:5900"  # VNC port for remote access[m
[32m+[m[32m      - "8080:8080"  # API server for dashboard integration[m
     volumes:[m
       - ./saves:/opt/dwarf-fortress/df/data/save    # Mount saves directory[m
       - ./logs:/opt/dwarf-fortress/df/stderr.txt    # Mount logs for AI analysis[m
[31m-      - ./output:/opt/dwarf-fortress/output         # Output directory for AI analysis[m
[32m+[m[32m      - ./output:/opt/dwarf-fortress/output:Z       # Output directory for AI analysis (with SELinux context)[m
     environment:[m
       - DISPLAY=:99[m
     stdin_open: true    # Keep STDIN open for interactive use[m
     tty: true          # Allocate a pseudo-TTY[m
     restart: unless-stopped[m
     [m
[32m+[m[32m  dashy:[m
[32m+[m[32m    image: lissy93/dashy:latest[m
[32m+[m[32m    container_name: dashy-fortress[m
[32m+[m[32m    ports:[m
[32m+[m[32m      - "4000:80"      # Dashy web interface[m
[32m+[m[32m    volumes:[m
[32m+[m[32m      - ./dashy-conf.yml:/app/public/conf.yml:ro   # Dashboard configuration[m
[32m+[m[32m    environment:[m
[32m+[m[32m      - NODE_ENV=production[m
[32m+[m[32m    depends_on:[m
[32m+[m[32m      - dwarf-fortress[m
[32m+[m[32m    restart: unless-stopped[m
[32m+[m[32m    healthcheck:[m
[32m+[m[32m      test: ["CMD", "curl", "-f", "http://localhost"][m
[32m+[m[32m      interval: 30s[m
[32m+[m[32m      timeout: 10s[m
[32m+[m[32m      retries: 3[m
[32m+[m
[32m+[m[32m  novnc:[m
[32m+[m[32m    image: theasp/novnc:latest[m
[32m+[m[32m    container_name: novnc-web[m
[32m+[m[32m    ports:[m
[32m+[m[32m      - "6080:6080"    # noVNC web interface[m
[32m+[m[32m    environment:[m
[32m+[m[32m      - VNC_SERVER=100.112.142.83:5900[m
[32m+[m[32m      - RUN_XVFB=no[m
[32m+[m[32m      - RUN_FLUXBOX=no[m
[32m+[m[32m    depends_on:[m
[32m+[m[32m      - dwarf-fortress[m
[32m+[m[32m    restart: unless-stopped[m
[32m+[m[41m    [m
     # Optional: Add resource limits[m
     deploy:[m
       resources:[m
[1mdiff --git a/start.sh b/start.sh[m
[1mindex 7236044..e77818e 100644[m
[1m--- a/start.sh[m
[1m+++ b/start.sh[m
[36m@@ -25,13 +25,23 @@[m [mecho "  ./df - Run Dwarf Fortress"[m
 echo "  ./dfhack - Run Dwarf Fortress with DFHack"[m
 echo "  ./dfhack-run - Run DFHack scripts"[m
 [m
[32m+[m[32m# Start API server in background[m
[32m+[m[32mecho "Starting Dwarf Fortress API server on port 8080..."[m
[32m+[m[32mcd /opt/dwarf-fortress[m
[32m+[m[32mpython3 df_api_server.py &[m
[32m+[m[32mAPI_PID=$![m
[32m+[m[32mecho "API server started (PID: $API_PID)"[m
[32m+[m
[32m+[m[32m# Return to DF directory[m
[32m+[m[32mcd /opt/dwarf-fortress/df[m
[32m+[m
 echo ""[m
 echo "Starting DFHack-enabled Dwarf Fortress..."[m
 [m
 # Function to cleanup on exit[m
 cleanup() {[m
     echo "Cleaning up..."[m
[31m-    kill $XVFB_PID $VNC_PID $WM_PID 2>/dev/null || true[m
[32m+[m[32m    kill $XVFB_PID $VNC_PID $WM_PID $API_PID 2>/dev/null || true[m
     exit[m
 }[m
 [m
