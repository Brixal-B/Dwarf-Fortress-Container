#!/bin/bash

# Dwarf Fortress Container Web UI Setup Script
# Quickly deploy the web management interface

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Message functions
msg_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

msg_ok() {
    echo -e "${GREEN}[✓]${NC} $1"
}

msg_error() {
    echo -e "${RED}[✗]${NC} $1"
}

msg_warn() {
    echo -e "${YELLOW}[⚠]${NC} $1"
}

# Header
header_info() {
    cat <<"EOF"
╔══════════════════════════════════════════════════════════════╗
║                                                              ║
║    🌐 Dwarf Fortress Web Management UI Setup 🌐              ║
║                                                              ║
║    Comprehensive container management interface              ║
║                                                              ║
╚══════════════════════════════════════════════════════════════╝
EOF
}

# Check prerequisites
check_prerequisites() {
    msg_info "Checking prerequisites..."
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        msg_error "Docker is not installed. Please install Docker first."
        exit 1
    fi
    
    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        msg_error "Docker Compose is not installed. Please install Docker Compose first."
        exit 1
    fi
    
    # Check if in correct directory
    if [[ ! -f "docker-compose.yml" ]]; then
        msg_error "Please run this script from the dwarf-fortress-container directory."
        exit 1
    fi
    
    # Check if on webui-management branch
    if command -v git &> /dev/null; then
        current_branch=$(git branch --show-current 2>/dev/null || echo "unknown")
        if [[ "$current_branch" != "webui-management" ]]; then
            msg_warn "Not on webui-management branch (current: $current_branch)"
            read -p "Switch to webui-management branch? [y/N]: " switch_branch
            if [[ $switch_branch =~ ^[Yy]$ ]]; then
                git checkout webui-management || {
                    msg_error "Failed to switch branch"
                    exit 1
                }
                msg_ok "Switched to webui-management branch"
            fi
        fi
    fi
    
    msg_ok "Prerequisites satisfied"
}

# Setup directories
setup_directories() {
    msg_info "Setting up directories..."
    
    # Create necessary directories
    mkdir -p saves logs output templates static/css static/js
    
    # Set permissions
    chmod 755 saves logs output templates static
    
    msg_ok "Directories created"
}

# Create default .env if not exists
setup_environment() {
    msg_info "Setting up environment configuration..."
    
    if [[ ! -f ".env" ]]; then
        cat > .env <<EOF
# Dwarf Fortress Container Environment Configuration
# Generated by Web UI setup script on $(date)

# Container Configuration
COMPOSE_PROJECT_NAME=dwarf-fortress

# API Configuration
API_PORT=8080

# Web Management Configuration
WEBUI_PORT=3000
EOF
        msg_ok "Created default .env file"
    else
        msg_ok ".env file already exists"
    fi
}

# Build and start services
build_and_start() {
    msg_info "Building and starting services..."
    
    # Build the web manager service
    msg_info "Building web management container..."
    docker-compose build web-manager
    
    # Start all services
    msg_info "Starting all services..."
    docker-compose up -d
    
    # Wait for services to be ready
    msg_info "Waiting for services to be ready..."
    sleep 10
    
    # Check service status
    msg_info "Checking service health..."
    if docker-compose ps | grep -q "Up"; then
        msg_ok "Services started successfully"
    else
        msg_error "Some services failed to start"
        docker-compose ps
        exit 1
    fi
}

# Display access information
show_access_info() {
    echo
    echo -e "${GREEN}╔═══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║                    🎉 Setup Complete! 🎉                      ║${NC}"
    echo -e "${GREEN}╚═══════════════════════════════════════════════════════════════╝${NC}"
    echo
    echo -e "${YELLOW}📋 Access Information:${NC}"
    echo
    echo -e "  🌐 ${BLUE}Web Management UI:${NC}    http://localhost:3000"
    echo -e "  📊 ${BLUE}Dashy Dashboard:${NC}     http://localhost:4000"
    echo -e "  🔧 ${BLUE}API Server:${NC}          http://localhost:8080"
    echo
    echo -e "${YELLOW}🚀 Quick Actions:${NC}"
    echo
    echo -e "  • Manage containers:     http://localhost:3000"
    echo -e "  • View fortress stats:   http://localhost:3000/fortress"
    echo -e "  • Check logs:            http://localhost:3000/logs"
    echo -e "  • Configure system:      http://localhost:3000/config"
    echo
    echo -e "${YELLOW}📖 Documentation:${NC}"
    echo
    echo -e "  • Web UI Guide:          cat WEBUI_README.md"
    echo -e "  • API Documentation:     cat README_API.md"
    echo -e "  • General README:        cat README.md"
    echo
    echo -e "${YELLOW}🛠️ Management Commands:${NC}"
    echo
    echo -e "  • Stop all:              docker-compose down"
    echo -e "  • Restart all:           docker-compose restart"
    echo -e "  • View status:           docker-compose ps"
    echo -e "  • View logs:             docker-compose logs -f"
    echo
    echo -e "${GREEN}Happy fortress management! 🏰${NC}"
    echo
}

# Test services
test_services() {
    msg_info "Testing service connectivity..."
    
    local failed=0
    
    # Test Web UI
    if curl -s -f http://localhost:3000 > /dev/null; then
        msg_ok "Web Management UI: Accessible"
    else
        msg_error "Web Management UI: Not accessible"
        failed=1
    fi
    
    # Test API
    if curl -s -f http://localhost:8080/api/health > /dev/null; then
        msg_ok "API Server: Accessible"
    else
        msg_warn "API Server: Not yet accessible (container may still be starting)"
    fi
    
    # Test Dashy
    if curl -s -f http://localhost:4000 > /dev/null; then
        msg_ok "Dashy Dashboard: Accessible"
    else
        msg_warn "Dashy Dashboard: Not yet accessible (container may still be starting)"
    fi
    
    if [[ $failed -eq 0 ]]; then
        msg_ok "Core services are accessible"
    else
        msg_warn "Some services may need more time to start"
    fi
}

# Main installation flow
main() {
    clear
    header_info
    echo
    echo -e "${BLUE}This script will set up the Web Management UI for your Dwarf Fortress container.${NC}"
    echo
    
    read -p "Continue with setup? [Y/n]: " confirm
    confirm=${confirm:-y}
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        msg_info "Setup cancelled"
        exit 0
    fi
    
    echo
    check_prerequisites
    setup_directories
    setup_environment
    build_and_start
    
    echo
    msg_info "Testing services..."
    sleep 5
    test_services
    
    show_access_info
}

# Handle script interruption
trap 'echo; msg_error "Setup interrupted"; exit 1' INT TERM

# Run main function
main "$@"
