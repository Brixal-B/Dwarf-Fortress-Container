version: '3.8'

services:
  dwarf-fortress:
    build: .
    container_name: dwarf-fortress-ai
    ports:
      - "8080:8080"  # API server for dashboard integration
      - "4000:4000"  # NoMachine remote desktop access
    volumes:
      - ./saves:/opt/dwarf-fortress/df/data/save    # Mount saves directory
      - ./logs:/opt/dwarf-fortress/df/stderr.txt    # Mount logs for AI analysis
      - ./output:/opt/dwarf-fortress/output:Z       # Output directory for AI analysis (with SELinux context)
    environment:
      - DISPLAY=:99
      - NOMACHINE_USER=dfuser
      - NOMACHINE_PASSWORD=dfpassword
    stdin_open: true    # Keep STDIN open for interactive use
    tty: true          # Allocate a pseudo-TTY
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "-f", "Xvfb"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    
  dashy:
    image: lissy93/dashy:latest
    container_name: dashy-fortress
    ports:
      - "4000:80"      # Dashy web interface
    volumes:
      - ./dashy-conf.yml:/app/public/conf.yml:ro   # Dashboard configuration
    environment:
      - NODE_ENV=production
    depends_on:
      - dwarf-fortress
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  web-manager:
    build:
      context: .
      dockerfile: Dockerfile.webmanager
    container_name: df-web-manager
    ports:
      - "3000:3000"    # Web management interface
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Docker socket for container management
      - .:/app/project:ro                              # Project files for management
      - ./templates:/app/templates:ro                  # Template files
      - ./static:/app/static:ro                        # Static files
    environment:
      - FLASK_ENV=production
      - PROJECT_PATH=/app/project
    depends_on:
      - dwarf-fortress
      - dashy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Resource limits for the web manager
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  df_saves:
    driver: local
  df_logs:
    driver: local