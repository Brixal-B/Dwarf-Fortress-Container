version: '3.8'

services:
  dwarf-fortress:
    build: .
    container_name: dwarf-fortress-ai
    ports:
      - "5900:5900"  # VNC port for remote access
      - "8080:8080"  # API server for dashboard integration
    volumes:
      - ./saves:/opt/dwarf-fortress/df/data/save    # Mount saves directory
      - ./logs:/opt/dwarf-fortress/df/stderr.txt    # Mount logs for AI analysis
      - ./output:/opt/dwarf-fortress/output:Z       # Output directory for AI analysis (with SELinux context)
    environment:
      - DISPLAY=:99
      - VNC_PASSWORD=${VNC_PASSWORD}
    stdin_open: true    # Keep STDIN open for interactive use
    tty: true          # Allocate a pseudo-TTY
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5900"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    
  dashy:
    image: lissy93/dashy:latest
    container_name: dashy-fortress
    ports:
      - "4000:80"      # Dashy web interface
    volumes:
      - ./dashy-conf.yml:/app/public/conf.yml:ro   # Dashboard configuration
    environment:
      - NODE_ENV=production
    depends_on:
      - dwarf-fortress
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  novnc:
    image: geek1011/easy-novnc:latest
    container_name: novnc-web
    ports:
      - "6080:8080"    # noVNC web interface
    environment:
      - VNC_HOST=dwarf-fortress
      - VNC_PORT=5900
      - DISPLAY_WIDTH=1024
      - DISPLAY_HEIGHT=768
      - VNC_PASSWORD=${VNC_PASSWORD}
    volumes:
      - ./validate-vnc.sh:/usr/local/bin/validate-vnc.sh:ro
    depends_on:
      dwarf-fortress:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/bin/bash", "/usr/local/bin/validate-vnc.sh", "test-connection"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # Optional: Add resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

volumes:
  df_saves:
    driver: local
  df_logs:
    driver: local
